name: Build

on: [push, pull_request]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }} with label ${{ matrix.label }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            label: "linux-target-x86_64"
          - os: macos-13
            label: "macos-target-x86_64"
            env:
              MACOSX_DEPLOYMENT_TARGET: "10.15"
          - os: macos-13
            label: "macos-target-arm64"
            env:
              MACOSX_DEPLOYMENT_TARGET: "11"
    
    env:
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.env.MACOSX_DEPLOYMENT_TARGET }}
      CIBW_CONFIG_SETTINGS: "cmake.verbose=true"

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set OpenMP env for macos x86_64
        if: matrix.label == 'macos-target-x86_64'
        run: |
          brew install libomp
          prefix=$(brew --prefix libomp)
          echo "LDFLAGS=$LDFLAGS -L$prefix/lib" >> $GITHUB_ENV
          echo "CXXFLAGS=$CXXFLAGS -I$prefix/include" >> $GITHUB_ENV

      - name: Set OpenMP env for macos arm64
        if: matrix.label == 'macos-target-arm64'
        run: |
          pkg=$(brew fetch --force --bottle-tag=arm64_ventura libomp | grep 'Downloaded to' | cut -d' ' -f3)
          brew install $pkg
          prefix=$(brew --prefix libomp)
          echo "LDFLAGS=$LDFLAGS -L$prefix/lib" >> $GITHUB_ENV
          echo "CXXFLAGS=$CXXFLAGS -I$prefix/include -arch arm64 -target arm64-apple-macos11" >> $GITHUB_ENV

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.17.0

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

      # - name: Setup tmate session
      #   if: ${{ failure() }}
      #   uses: mxschmitt/action-tmate@v3
      #   with:
      #     limit-access-to-actor: true

  make_sdist:
    name: Make SDist
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Build SDist
      run: |
        pip install -U build
        python -m build --sdist

    - uses: actions/upload-artifact@v4
      with:
        name: cibw-sdist
        path: dist/*.tar.gz

  upload_all:
    needs: [build_wheels, make_sdist]
    environment: pypi
    
    permissions:
      id-token: write
    runs-on: ubuntu-latest
    # TODO: only run on release
    # if: github.event_name == 'release' && github.event.action == 'published'
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/download-artifact@v4
      with:
        pattern: cibw-*
        path: dist
        merge-multiple: true

    - uses: pypa/gh-action-pypi-publish@release/v1
